from typing import Any, Dict, List

from fastapi import APIRouter, BackgroundTasks, Depends, HTTPException, Query
from sqlalchemy.orm import Session

from app.core.auth import get_current_active_user
from app.db.session import get_db
from app.models.user import User
from app.schemas.report import ReportRequest, ReportResponse
from app.services.report import ReportService
from app.workers.celery_app import generate_report as celery_generate_report

router = APIRouter()


@router.post("/generate", response_model=Dict[str, Any])
async def generate_report(
        background_tasks: BackgroundTasks,
        report_request: ReportRequest,
        db: Session = Depends(get_db),
        current_user: User = Depends(get_current_active_user),
) -> Any:
    """
    Generate a new report.
    If run_async is True, the report will be generated in the background as a Celery task.
    Otherwise, it will run as a FastAPI background task.
    """
    # Check permissions
    if not current_user.has_permission("reports:generate"):
        raise HTTPException(status_code=403, detail="Not enough permissions")

    if report_request.run_async:
        # Run in Celery
        task = celery_generate_report.delay(
            report_type=report_request.report_type,
            parameters=report_request.parameters,
            user_id=current_user.id
        )
        return {"task_id": task.id, "status": "scheduled"}
    else:
        # Run immediately in background
        try:
            report_service = ReportService(db)
            background_tasks.add_task(
                report_service.generate_report,
                report_type=report_request.report_type,
                parameters=report_request.parameters,
                user_id=current_user.id
            )

            return {"status": "started", "message": "Report generation started in background"}
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"Report generation failed: {str(e)}")


@router.get("/", response_model=List[ReportResponse])
def read_reports(
        skip: int = 0,
        limit: int = 100,
        report_type: str = Query(None, description="Filter by report type"),
        status: str = Query(None, description="Filter by status (completed, processing, failed)"),
        db: Session = Depends(get_db),
        current_user: User = Depends(get_current_active_user),
) -> Any:
    """
    Retrieve reports generated by the user or all reports for superusers.
    """
    from app.models.report import Report

    query = db.query(Report)

    # Regular users can only see their own reports
    if not current_user.is_superuser:
        query = query.filter(Report.user_id == current_user.id)

    if report_type:
        query = query.filter(Report.report_type == report_type)
    if status:
        query = query.filter(Report.status == status)

    query = query.order_by(Report.created_at.desc())
    reports = query.offset(skip).limit(limit).all()

    return reports


@router.get("/{report_id}", response_model=ReportResponse)
def read_report(
        report_id: int,
        db: Session = Depends(get_db),
        current_user: User = Depends(get_current_active_user),
) -> Any:
    """
    Get a specific report by id.
    """
    from app.models.report import Report

    report = db.query(Report).filter(Report.id == report_id).first()
    if not report:
        raise HTTPException(status_code=404, detail="Report not found")

    # Check if user has permission to view this report
    if not current_user.is_superuser and report.user_id != current_user.id:
        raise HTTPException(status_code=403, detail="Not enough permissions")

    return report


@router.get("/{report_id}/download")
def download_report(
        report_id: int,
        db: Session = Depends(get_db),
        current_user: User = Depends(get_current_active_user),
) -> Any:
    """
    Download a report file.
    """
    from app.models.report import Report
    from fastapi.responses import FileResponse
    import os

    report = db.query(Report).filter(Report.id == report_id).first()
    if not report:
        raise HTTPException(status_code=404, detail="Report not found")

    # Check if user has permission to view this report
    if not current_user.is_superuser and report.user_id != current_user.id:
        raise HTTPException(status_code=403, detail="Not enough permissions")

    # Check if report is completed and file exists
    if report.status != "completed" or not report.file_path:
        raise HTTPException(status_code=400, detail="Report is not ready for download")

    if not os.path.exists(report.file_path):
        raise HTTPException(status_code=404, detail="Report file not found")

    return FileResponse(
        path=report.file_path,
        filename=os.path.basename(report.file_path),
        media_type="application/octet-stream"
    )